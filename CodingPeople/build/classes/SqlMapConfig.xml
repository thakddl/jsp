<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMapConfig
    PUBLIC "-//ibatis.apache.org//DTD SQL Map Config 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-config-2.dtd">

<sqlMapConfig>
	<!--
	DB와 연결하는 정보를 properties파일에 설정해 놓고 이 properties파일의
	내용을 읽어와 설정한다.
	 -->
	<properties resource="db.properties" />

	<!-- ibatis를 처리하기 위한 환경설정 부분 -->
	<settings cacheModelsEnabled="true" enhancementEnabled="true"
		lazyLoadingEnabled="true" maxRequests="32" maxSessions="10"
		maxTransactions="5" useStatementNamespaces="true" />

	<!--
	VO클래스등의 이름이 패키지명까지 기술하면 길어지는데 이것을 간단히
	표시하기 위해서 alias를 지정할 수 있다.
	형식) <typeAlias alias="alias명" type="클래스의 풀네임"/>
	 -->
	<typeAlias alias="groupStudyVO" type="GroupStudy.VO.GroupStudyVO"/>
	<typeAlias alias="joinVO" type="GroupStudy.VO.JoinVO"/>
	<typeAlias alias="joinMemberVO" type="member.vo.JoinMemberVO"/> <!-- 회원가입 시 활용하는 vo -->
	<typeAlias alias="SMemberVO" type="GroupStudy.VO.SMemberVO"/>
	<typeAlias alias="allMemVO" type="adminMember.vo.AllMembershipInfoVO"/> <!-- 관리자가 회원관리 시 활용하는 vo(member테이블 전체 컬럼 기술되어있음) -->
	<typeAlias alias="BoardVO" type="Board.VO.BoardVO"/>
	<typeAlias alias="QuestionBoardVO" type="QuestionBoard.VO.QuestionBoardVO"/>
	<typeAlias alias="atchFileVO" type="atch.VO.AtchFileVO"/>
	<typeAlias alias="replyVO" type="Reply.VO.ReplyVO"/>
	<typeAlias alias="questionreplyVO" type="QuestionReply.VO.QuestionReplyVO"/>
	<typeAlias alias="CoinHistoryVO" type="coin.vo.CoinHistoryVO"/>
	<typeAlias alias="MemberVO" type="coin.vo.MemberVO"/>
	<typeAlias alias="CategoryVO" type="lecture.vo.categoryVO"/>
	<typeAlias alias="bookCategoryVO" type="book.VO.BookCategoryVO"/>
	<typeAlias alias="lectureVO" type="lecture.vo.LectureVO"/>
	<typeAlias alias="CourseVO" type="lecture.vo.CourseVO"/>
	<typeAlias alias="BookInfoVO" type="lecture.vo.BookInfoVO"/>
	<typeAlias alias="adminCategoryVO" type="adminCategory.vo.AdminCategoryVO"/><!-- 카테고리 조회 vo -->
	<typeAlias alias="lectureJoinVO" type="lecture.vo.LectureJoinVO"/>
	
	

	<!--
	DB와의 연결을 처리하는 부분
	SqlMapConfig.properties에 설정해 놓은 정보를 이용하여 구성한다.
	1. SIMPLE => SimpleDataSourceFactory
		SimpleDataSource는 데이터소스를 제공하는 컨테이너가 없는 경우 connection을 제공하기 위해 기본적으로 pooling 데이터소스 구현을 제공한다.
		이것은 iBATIS SimpleDataSource connection pooling을 기반으로 한다.

	2. DBCP => DbcpDataSourceFactory
	DbcpDataSourceFactory는 DataSource API를 통해 connection pooling 서비스를 제공하기 위해 DBCP를 사용한다.
	이 DataSource는 어플리케이션/웹 컨테이너가 DataSource 구현물을 제공하지 못하거나 standalone 어플리케이션을 구동할 때 이상적이다.

    3. JNDI => JndiDataSourceFactory
 	JndiDataSourceFactory 는 어플리케이션 컨테이너내 JNDI 컨텍스트로부터 DataSource 구현물을 가져와야 한다.
 	이것은 어플리케이션 서버를 사용중이고 컨테이너 관리 connection pool 과 DataSource 가 제공될 때 사용한다.
 	JDBC DataSource 구현물에 접근하기 위한 표준적인 방법은 JNDI 컨텍스트를 통하여 접근하는 것이다.



	 -->
	<transactionManager type="JDBC">
		<dataSource type="SIMPLE">
		<!--
			각종 설정을 직접 기술해서 처리할 수도 있다.
			<property name="JDBC.Driver" value="oracle.jdbc.driver.OracleDriver" />
		 -->
			<property name="JDBC.Driver" value="${driver}" />
			<property name="JDBC.ConnectionURL" value="${url}" />
			<property name="JDBC.Username" value="${username}" />
			<property name="JDBC.Password" value="${password}" />
			<!-- 커넥션 개수를 1개로 설정함. -->
			<property name="Pool.MaximumActiveConnections" value="1"/>
			<property name="Pool.MaximumIdleConnections" value="1"/>
		</dataSource>
	</transactionManager>

	<!--
	실제 처리할 SQL문은 xml문서로 따로 만든 후
	그 xml문서와 아래와 같이 연결하여 사용한다.
	형식) <sqlMap resource="경로명/파일명.xml"/>
	-->
 	<sqlMap resource="sqlmap/groupStudy.xml"/>
 	<sqlMap resource="sqlmap/joinMember.xml"/>
 	<sqlMap resource="sqlmap/login.xml"/>
 	<sqlMap resource="sqlmap/adminMember.xml"/> <!-- 회원관리 xml -->
 	<sqlMap resource="sqlmap/board.xml"/>
 	<!-- <sqlMap resource="sqlmap/questionboard.xml"/> 문의게시판 -->
 	<sqlMap resource="sqlmap/atchFile.xml"/>
 	<sqlMap resource="sqlmap/member.xml"/>
 	<sqlMap resource="sqlmap/lecture.xml"/>
 	<sqlMap resource="sqlmap/book.xml"/>
 	<sqlMap resource="sqlmap/adminCategory.xml"/><!-- 관리자 > 카테고리 xml -->
 	<sqlMap resource="sqlmap/clientMyPage.xml"/><!-- 회원 > MyPage -->

</sqlMapConfig>






