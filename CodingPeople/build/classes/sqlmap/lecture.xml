<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
			PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
			"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="lecture">
<!-- 
	이 영역에 SQL문에 맞는 태그를 사용하여 SQL문을 작성한다.
	
	사용할 수 있는 기본적인 태그들
	<select> ~~~ </select>
	<insert> ~~~ </insert>
	<update> ~~~ </update>
	<delete> ~~~ </delete>
	
	위 태그에서 사용되는 속성들
	
	1) id속성 : 해당 태그를 호출할 때 <sqlMap>태그의 namespace와 연결하여 사용하는 이름.
	2) parameterClass속성 : SQL문에 사용될 데이터가 들어있는 객체를 지정한다.(보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
						  (typeAlias로 지정한 alias명을 사용할 수 있다.
	3) resultClass속성 : select문을 실행한 결과를 담을 객체를 지정한다. (보통 VO클래스나 자바의 자료형이름을 사용한다.)
	4) resultMap속성 : 결과 레코드 컬럼명과 VO객체의 property명이 다를 경우에 적절한 매핑을 위해 사용한다.
 -->
 
 <resultMap id="CategoryMap" class="CategoryVO">
 	<result property="categoryId" column="CATEGORY_ID"/>
 	<result property="categoryName" column="CATEGORY_NAME"/>
 </resultMap>
 
 <!-- 카테고리 리스트 목록 받아오기 -->
 <select id="getCategory" resultMap="CategoryMap">
	 SELECT CATEGORY_ID,
	        CATEGORY_NAME
	   FROM CATEGORY
	  ORDER BY 2
 </select>
 
 <resultMap id="BookInfoMap" class="BookInfoVO">
 	<result property="bookinfoId" column="BOOKINFO_ID"/>
 	<result property="bookinfoNm" column="BOOKINFO_NM"/>
 	<result property="categoryId" column="CATEGORY_ID"/>
 </resultMap>
 
 <!-- 카테고리에 따른 도서 리스트 목록 받아오기 -->
 <select id="getBookList" parameterClass="String" resultMap="BookInfoMap">
	SELECT BOOKINFO_ID
	      ,BOOKINFO_NM
	      ,CATEGORY_ID
	  FROM BOOKINFO
	 WHERE CATEGORY_ID = #categoryId#
 </select>
 
 <select id="getUniqueId" parameterClass="String" resultClass="String">
 	  SELECT MAX(COURSE_ID)
    	FROM COURSE
  	   WHERE COURSE_ID LIKE #CategoryId# || '%'
 
 </select>
 
 <insert id="insertRequest" parameterClass="CourseVO" >
 	
  	INSERT INTO COURSE (COURSE_ID
	                   ,BOOKINFO_ID
	                   ,CATEGORY_ID
	                   ,LECTURE_APPROVAL_ID
	                   ,MEM_ID
	                   ,COURSE_TITLE
	                   ,COURSE_COMPOSITION
	                   ,COURSE_INTRODUCTION
	                   ,COURSE_PRICE
	                   ,COURSE_DATE
	                   ,ATCH_FILE_ID
	           )VALUES (#courseId#
	                   ,#bookinfoId#
	                   ,#categoryId#
	                   ,'wait'
	                   ,#memId#
	                   ,#courseTitle#
	                   ,#courseComposition#
	                   ,#courseIntroduction#
	                   ,#coursePrice#
	                   ,SYSDATE
	                   ,#atchFileId#)
	                   
 </insert>
 
	<resultMap id="CourseMap" class="CourseVO">
 	<result property="courseId" column="COURSE_ID"/>
 	<result property="bookinfoId" column="BOOKINFO_ID"/>
 	<result property="categoryId" column="CATEGORY_ID"/>
 	<result property="lectureApprovalId" column="LECTURE_APPROVAL_ID"/>
 	<result property="memId" column="MEM_ID"/>
 	<result property="courseTitle" column="COURSE_TITLE"/>
 	<result property="courseComposition" column="COURSE_COMPOSITION"/>
 	<result property="courseTime" column="COURSE_TIME"/>
 	<result property="courseIntroduction" column="COURSE_INTRODUCTION"/>
 	<result property="coursePrice" column="COURSE_PRICE"/>
 	<result property="courseValidity" column="COURSE_VALIDITY"/>
 	<result property="courseSales" column="COURSE_SALES"/>
 	<result property="courseDate" column="COURSE_DATE"/>
 	<result property="atchFileId" column="ATCH_FILE_ID"/>
 </resultMap>
 
 <select id="displayRequestList" resultMap="CourseMap">
 
 	 SELECT COURSE_ID
		   ,BOOKINFO_ID
		   ,CATEGORY_ID
	       ,LECTURE_APPROVAL_ID
	       ,MEM_ID
	       ,COURSE_TITLE
	       ,COURSE_COMPOSITION
	       ,COURSE_TIME
	       ,COURSE_INTRODUCTION
	       ,COURSE_PRICE
	       ,COURSE_VALIDITY
	       ,COURSE_SALES
	       ,COURSE_DATE
	       ,ATCH_FILE_ID
	   FROM COURSE
	  ORDER BY 4 DESC, COURSE_DATE DESC
 
 </select>
 
  <select id="getDetail" parameterClass="String" resultMap="CourseMap">
  
 	 SELECT COURSE_ID
		   ,BOOKINFO_ID
		   ,CATEGORY_ID
	       ,LECTURE_APPROVAL_ID
	       ,MEM_ID
	       ,COURSE_TITLE
	       ,COURSE_COMPOSITION
	       ,COURSE_TIME
	       ,COURSE_INTRODUCTION
	       ,COURSE_PRICE
	       ,COURSE_VALIDITY
	       ,COURSE_SALES
	       ,COURSE_DATE
	       ,ATCH_FILE_ID
	   FROM COURSE
	  WHERE COURSE_ID = #courseId#
 
 </select>
 
 <delete id="deleteLecture" parameterClass="String">
 	
 	DELETE FROM COURSE
	WHERE COURSE_ID = #aa#
 
 </delete>
 
 <update id="updateRequest" parameterClass="CourseVO">
 	 UPDATE COURSE SET
    	   BOOKINFO_ID = #bookinfoId#
		   ,CATEGORY_ID = #categoryId#
           ,LECTURE_APPROVAL_ID = #lectureApprovalId#
	       ,MEM_ID = #memId#
	       ,COURSE_TITLE = #courseTitle#
	       ,COURSE_COMPOSITION = #courseComposition#
	       ,COURSE_INTRODUCTION = #courseIntroduction#
	       ,COURSE_PRICE = #coursePrice#
	       ,ATCH_FILE_ID = #atchFileId#
	  WHERE 
	    COURSE_ID = #courseId#
 </update>	

 <insert id="insertLecture" parameterClass="lectureVO">

    INSERT INTO LECTURE(
        LECTURE_NO
        ,COURSE_ID
        ,LECTURE_TITLE
    )VALUES(
        #lectureNo#
        ,#courseId#
        ,#lectureTitle#
    )
 	
 </insert>
 
 <update id="updateState" parameterClass="lectureVO">
	  UPDATE COURSE SET
             LECTURE_APPROVAL_ID = 'sale'
	   WHERE COURSE_ID = #courseId#
 </update>	
 
 <select id="getCourseList" resultMap="CourseMap">
 	 	 SELECT COURSE_ID
		   ,BOOKINFO_ID
		   ,CATEGORY_ID
	       ,LECTURE_APPROVAL_ID
	       ,MEM_ID
	       ,COURSE_TITLE
	       ,COURSE_COMPOSITION
	       ,COURSE_TIME
	       ,COURSE_INTRODUCTION
	       ,COURSE_PRICE
	       ,COURSE_VALIDITY
	       ,COURSE_SALES
	       ,COURSE_DATE
	       ,ATCH_FILE_ID
	   FROM COURSE
	  WHERE LECTURE_APPROVAL_ID = 'sale'
	  ORDER BY COURSE_DATE DESC
 </select>
 
 <insert id="insertCstudent" parameterClass="lecture.vo.LHistoryVO">
 
 	INSERT INTO CURRENT_STUDENT(
         MEM_ID
        ,COURSE_ID
        ,START_DATE
    )VALUES(
        #memId#
        ,#courseId#
        ,SYSDATE
    )
 	
 </insert>
 
 <insert id="insertBHistory" parameterClass="lecture.vo.LHistoryVO">
 
    INSERT INTO LECTURE_HISTORY(
         MEM_ID
        ,COURSE_ID
        ,LHISTORY_NO
        ,APPLICATION_DATE
        ,APPLICATION_KEY
    )VALUES(
         #memId#
        ,#courseId#
        ,LHistory_num_seq.NEXTVAL
        ,SYSDATE
        ,#courseTitle#
    )
 	
 </insert>
 
 <insert id="insertSHistory" parameterClass="lecture.vo.LHistoryVO">
 
    INSERT INTO LECTURE_HISTORY(
         MEM_ID
        ,COURSE_ID
        ,LHISTORY_NO
        ,APPLICATION_DATE
        ,APPLICATION_KEY
    )VALUES(
         (SELECT MEM_ID
            FROM COURSE
           WHERE COURSE_ID = #courseId#)
        ,#courseId#
        ,LHistory_num_seq.NEXTVAL
        ,SYSDATE
        ,#courseTitle#
    )
 	
 </insert>
 
  <insert id="insertSellerCoinHistory" parameterClass="lecture.vo.LHistoryVO">
 
    INSERT INTO COIN_HISTORY(
			CHISTORY_NO
		   ,CEVENT_ID
		   ,CHISTORY_DATE
		   ,CHISTORY_BALANCE
		   ,CHISTORY_COIN
		   ,MEM_ID
    )VALUES(
         CHISTORY_SEQ.NEXTVAL
        ,'동영상강의 판매'
        ,SYSDATE
        ,#memCoin# + #coursePrice#
        ,'+'||#coursePrice#
        ,(SELECT MEM_ID
            FROM COURSE
           WHERE COURSE_ID = #courseId#)
    )
 	
 </insert>
 
  <insert id="insertBuyerCoinHistory" parameterClass="lecture.vo.LHistoryVO">
 
    INSERT INTO COIN_HISTORY(
			CHISTORY_NO
		   ,CEVENT_ID
		   ,CHISTORY_DATE
		   ,CHISTORY_BALANCE
		   ,CHISTORY_COIN
		   ,MEM_ID
    )VALUES(
         CHISTORY_SEQ.NEXTVAL
        ,'동영상강의 구매'
        ,SYSDATE
        ,#memCoin#
        ,'-'||#coursePrice#
        ,#memId#
    )
 	
 </insert>
 	
 <select id="getBuyerCoin" parameterClass="String" resultClass="Integer">
 	
 	SELECT MEM_COIN FROM MEMBER
	 WHERE MEM_ID = #aa#
 	
 </select>
 
 <select id="getSellerCoin" parameterClass="String" resultClass="Integer">
 	
 	SELECT MEM_COIN FROM MEMBER
	 WHERE MEM_ID = (SELECT MEM_ID
                       FROM COURSE
                      WHERE COURSE_ID = #courseId#)
 	 
 </select>
 
 <update id="updateSellerCoin" parameterClass="lecture.vo.LHistoryVO">
 
   UPDATE MEMBER SET 
		  MEM_COIN = (SELECT MEM_COIN + #coursePrice#
                        FROM MEMBER
                       WHERE MEM_ID = (SELECT MEM_ID
                                         FROM COURSE
                                        WHERE COURSE_ID = #courseId#))
	WHERE MEM_ID = (SELECT MEM_ID
                      FROM COURSE
                     WHERE COURSE_ID = #courseId#)
 </update>
 
 <update id="updateBuyerCoin" parameterClass="lecture.vo.LHistoryVO">
 
	UPDATE MEMBER SET 
		  MEM_COIN = #memCoin#
	WHERE MEM_ID = #memId#
	
 </update>
 
  <select id="getBuyCourseList" resultMap="CourseMap" parameterClass="String">
  
     SELECT COURSE_ID
		   ,BOOKINFO_ID
		   ,CATEGORY_ID
	       ,LECTURE_APPROVAL_ID
	       ,MEM_ID
	       ,COURSE_TITLE
	       ,COURSE_COMPOSITION
	       ,COURSE_TIME
	       ,COURSE_INTRODUCTION
	       ,COURSE_PRICE
	       ,COURSE_VALIDITY
	       ,COURSE_SALES
	       ,COURSE_DATE
	       ,ATCH_FILE_ID
	   FROM COURSE
	  WHERE COURSE_ID IN (SELECT DISTINCT(COURSE_ID)
					 	    FROM LECTURE_HISTORY
					       WHERE MEM_ID = #memId#)
	  ORDER BY COURSE_DATE DESC				       
	  
 </select>
 
 <resultMap id="lectureMap" class="lectureVO">
 	<result property="courseId" column="COURSE_ID"/>
 	<result property="lectureNo" column="LECTURE_NO"/>
 	<result property="lectureTitle" column="LECTURE_TITLE"/>
 </resultMap>
 
 <select id="lectureList" resultMap="lectureMap">
 	
 	  SELECT COURSE_ID
            ,LECTURE_NO
            ,LECTURE_TITLE
        FROM LECTURE
       WHERE COURSE_ID = #courseId#
       ORDER BY 2
 
 </select>
 
</sqlMap>
